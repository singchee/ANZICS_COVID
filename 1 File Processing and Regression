library(tidyverse)
library(lubridate)
library(zoo)


df1=.xls

#choose columns of interest
df2= df %>%
	select(c(PatientID, HospitalClassification, 
                  JurisdictionName,postcode,SiteID, AGE, ELECT, SEX,AP3DIAG, AP3_SUBCODE, ELECT_SURG, READMITTED,
                  PLAN_ICU, ECMO_IND, INV_IND, RENAL_IND, INOTROP_IND, 
		  ICU_AD_DTM, ICU_HRS,ICU_SRCE, ICU_OUTCM, DIED_ICU,
                  HOSP_OUTCM, HOSP_HRS, DIED_HOSP,
		  ANZRODIsSMR, ANZRODRiskOfDeath, 
                  ANZRODRiskofDeath_old, Apache2Score, Apache3Score, PANDEMIC, FRAILTY)) %>%
		  
	  mutate(as.factor(DIED_HOSP), as.factor(pandperiod), as.numeric(pandseries), as.factor(state_subgroup), as.factor(HospitalClassification), as.factor(SiteID))


#Tidy dataset, replacing NAs with 0, Update ANZROD based on date ,  pandemic variable - admitted >= March 2020, state subgroup(VIC+NSW+ACT combined), and linking date

df2 = df2 %>% 
     
     replace_na(list(DIED_ICU=0, DIED_HOSP=0, PLAN_ICU=0, ELECT=0, ELECT_SURG=0, ECMO_IND=0, INV_IND=0, RENAL_IND=0, INOTROP_IND=0, VENTILATED=0)) %>%
     mutate(ANZROD = ifelse(ICU_AD_DTM >= as.Date("2020-01-01", origin = "1970-01-01"), ANZRODRiskOfDeath, ANZRODRiskofDeath_old),
            pandemicperiod = ifelse(ICU_AD_DTM >= as.Date("2020-03-01", origin = "1970-01-01"), 1, 0), 
            state_subgroup = ifelse(JurisdictionName %in% c('VIC', 'NSW', 'ACT'), 1, 0),
            date = paste(year(ICU_AD_DTM), month(ICU_AD_DTM), sep="-"),
            SEX = recode(SEX, NULL="O", I="O"))


#Apply exclusions/inclusions, Select only those with SMR, remove NZ, remove pandemic codes, readmissions, transfers
df3 = df2 %>% 
	filter(ANZRODIsSMR == 1) %>%
	filter(JurisdictionName !="NZ") %>%
	filter(PANDEMIC !=1|is.na(PANDEMIC)) %>% 
	filter(!AP3_SUBCODE  %in% 
	      c(101.03, 102.03, 104.02, 106.05, 107.06, 110.02, 
	      203.02, 204.02, 206.02, 208.02 , 209.02, 210.03, 212.03, 213.02, 
	      301.05, 
	      404.04, 
	      501.07, 503.02, 
	      704.12, 
	      901.08, 
	      1101.10 , 1102.02)) %>%
      filter(READMITTED == 0) %>%
      filter(ICU_OUTCM != 5) %>%
      filter(ICU_SRCE !=5 & ICU_SRCE !=6)


#generate table 1

library(tableone)
catVars=c("SEX","PLAN_ICU", "DIED_ICU","DIED_HOSP", "INOTROP_IND","RENAL_IND", "ECMO_IND", "INV_IND","ELECT_SURG" )
tab = CreateTableOne(data = df3, vars =c("SEX", "AGE", "PLAN_ICU", "ELECT_SURG",
                                         "Apache2Score", "Apache3Score","ANZROD", 
                                          "DIED_ICU","DIED_HOSP", 
                                          "HOSP_HRS", "ICU_HRS", 
                                          "ECMO_IND", "INV_IND", "RENAL_IND", "INOTROP_IND"), strata= "pandemicperiod", factorVars = catVars)
nonnormalVars = c("AGE", "Apache2Score", "Apache3Score","ANZROD", "HOSP_HRS", "ICU_HRS")					  
print(tab, nonnormal=nonnormalVars)
---------------------------------------

--------------------------
#patient level multivariate regression analysis
#Link in time series variables for patient level analysis

df4 %>% 
	mutate(date=as.Date(zoo::as.yearmon(paste(year, month, sep="-"))) #date linkage key

linked= merge(x=df4, y=select(df5, c("date", "pandperiod", "series", "pandseries")), by ="date", all.x=TRUE)

linked = linked %>%
     mutate(series = series.y) %>%
     select(-series.x, -series.y)

library(lme4)
m = glmer(DIED_HOSP ~ ANZROD + pandperiod + series + pandseries + state_subgroup + HospitalClassification + (1|SiteID), data=linked, family=binomial, control = glmerControl(optimizer = "bobyqa"),
    nAGQ = 10)
summary(m)
write.csv(summary(m)$coefficients, file="coeff.csv")]

library(broom.mixed)
tidy(m,conf.int=TRUE,exponentiate=TRUE,effects="fixed")

----------------------------------
#EWMA

   
   
<ignore below>
#get 95% CI
confint(glm.binary)

#ROC modelling

#generate predicted outcomes for dataset
ROCpred = predict(glm.binary, 
                  type='response')
                  
#assign observed outcomes to cases 
pred = prediction(ROCpred, df1$died_hosp)

#calculate model performance
perf_auc = performance(pred, measure = "tpr", x.measure = "fpr")
perf_acc= performance(pred, measure = "acc")
max(perf_acc@y.values[[1]])

#AUC Plots and reports
plot(perf, col=rainbow(10))

perf_auc = performance(pred, measure = "auc")
perf_auc@y.values[[1]]

