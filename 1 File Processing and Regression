library(tidyverse)
library(lubridate)
library(zoo)


df1=.xls

#choose columns of interest
df2= df %>%
	select(c(PatientID, HospitalClassification, 
                  JurisdictionName,postcode,SiteID, AGE, ELECT, SEX,AP3DIAG, AP3_SUBCODE, ELECT_SURG, READMITTED,
                  PLAN_ICU, ECMO_IND, INV_IND, RENAL_IND, INOTROP_IND, 
		  ICU_AD_DTM, ICU_HRS,ICU_SRCE, ICU_OUTCM, DIED_ICU,
                  HOSP_OUTCM, HOSP_HRS, DIED_HOSP,
		  ANZRODIsSMR, ANZRODRiskOfDeath, 
                  ANZRODRiskofDeath_old, Apache2Score, Apache3Score, PANDEMIC, FRAILTY)) %>%
		  
	  mutate(as.factor(DIED_HOSP), as.factor(pandperiod), as.numeric(pandseries), as.factor(state_subgroup), as.factor(HospitalClassification), as.factor(SiteID))


#Tidy dataset, replacing NAs with 0, Update ANZROD based on date ,  pandemic variable - admitted >= March 2020, state subgroup(VIC+NSW+ACT combined), and linking date

df2 = df2 %>% 
     
     replace_na(list(DIED_ICU=0, DIED_HOSP=0, PLAN_ICU=0, ELECT=0, ELECT_SURG=0, ECMO_IND=0, INV_IND=0, RENAL_IND=0, INOTROP_IND=0, VENTILATED=0)) %>%
     mutate(ANZROD = ifelse(ICU_AD_DTM >= as.Date("2020-01-01", origin = "1970-01-01"), ANZRODRiskOfDeath, ANZRODRiskofDeath_old),
            pandemicperiod = ifelse(ICU_AD_DTM >= as.Date("2020-03-01", origin = "1970-01-01"), 1, 0), 
            state_subgroup = ifelse(JurisdictionName %in% c('VIC', 'NSW', 'ACT'), 1, 0),
            date = paste(year(ICU_AD_DTM), month(ICU_AD_DTM), sep="-"),
            SEX = recode(SEX, NULL="O", I="O"))


#Apply exclusions/inclusions, Select only those with SMR, remove NZ, remove pandemic codes, readmissions, transfers
df3 = df2 %>% 
	filter(ANZRODIsSMR == 1) %>%
	filter(JurisdictionName !="NZ") %>%
	filter(PANDEMIC !=1|is.na(PANDEMIC)) %>% 
	filter(!AP3_SUBCODE  %in% 
	      c(101.03, 102.03, 104.02, 106.05, 107.06, 110.02, 
	      203.02, 204.02, 206.02, 208.02 , 209.02, 210.03, 212.03, 213.02, 
	      301.05, 
	      404.04, 
	      501.07, 503.02, 
	      704.12, 
	      901.08, 
	      1101.10 , 1102.02)) %>%
      filter(READMITTED == 0) %>%
      filter(ICU_OUTCM != 5) %>%
      filter(ICU_SRCE !=5 & ICU_SRCE !=6)


#generate table 1

library(tableone)
catVars=c("SEX","PLAN_ICU", "DIED_ICU","DIED_HOSP", "INOTROP_IND","RENAL_IND", "ECMO_IND", "INV_IND","ELECT_SURG" )
tab = CreateTableOne(data = df3, vars =c("SEX", "AGE", "PLAN_ICU", "ELECT_SURG",
                                         "Apache2Score", "Apache3Score","ANZROD", 
                                          "DIED_ICU","DIED_HOSP", 
                                          "HOSP_HRS", "ICU_HRS", 
                                          "ECMO_IND", "INV_IND", "RENAL_IND", "INOTROP_IND"), strata= "pandemicperiod", factorVars = catVars)
nonnormalVars = c("AGE", "Apache2Score", "Apache3Score","ANZROD", "HOSP_HRS", "ICU_HRS")					  
print(tab, nonnormal=nonnormalVars)
---------------------------------------
#SMR based interrupted time series with monthly granularity
#group data by month and calculate SMR
df5=df4 %>%
    mutate(year = year(ICU_AD_DTM), month = month(ICU_AD_DTM)) %>%
    group_by(month, year) %>%
    summarise(SMR = mean(DIED_HOSP)/mean(ANZROD)) %>%
    arrange(year, month) 

df4$yymm=paste(df4$year, df4$month, sep="-")
df4$date = as.Date(


#Generate valid time stamp for each month
library(zoo)
df4$date=as.Date(zoo::as.yearmon(df4$yymm))

#generate pandemic period and time series labels
df4=df4 %>%
    mutate(pandperiod = dplyr::if_else(date>=as.Date("2020-03-01"), 1, 0)) %>%
    group_by(pandperiod) %>%
    mutate(pandseries = seq_along(pandperiod))

df4$series= 1:nrow(df4)
df4$pandseries=ifelse(df4$pandperiod == "0", "0", df4$pandseries)

#Generate daily SMR calculations + timeseries
smr_day = dataset_ewma_overall %>%
     group_by(AD_Date = as.Date(ICU_AD_DTM)) %>%
     summarise(SMR = mean(DIED_HOSP)/mean(ANZRODRiskofDeath_old), 
               ANZROD_old = mean(ANZRODRiskofDeath_old), 
	                      hosp_mortality = mean(DIED_HOSP)) %>%
     mutate(pandperiod = if_else(AD_Date>=as.Date("2020-03-01"), 1, 0), series= 1:nrow(.)) %>%
     group_by(pandperiod) %>%
     mutate(pandseries = seq_along(pandperiod))

#SMR plot
ggplot(df5, aes(x=date,y=SMR, group=1)) + 
    geom_line() + 
    ylim(0.8, 1) + 
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + 
    geom_vline(xintercept = as.Date("2020-03-01"), linetype="dotted",color = "blue", size=1)+
    geom_smooth(method = "lm", aes(group=pandperiod)) +
    annotate(geom="text", x=as.Date("2020-10-01"), y=1,label="Pandemic period",color="red")

#SMR plot with Segmented analysis
ggplot(smr_month, aes(x=as.Date(YYMM),y=SMR, group=1)) + 
     geom_line() + 
     ylim(0.8, 1) + 
     theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + 
     geom_vline(xintercept = as.Date("2020-03-01"), linetype="dotted",color = "blue", size=1)+
     geom_smooth(method = "lm", aes(group=pandperiod)) +
     geom_smooth(method = "lm", aes(group=segment), linetype="dashed", color ="red") +
     annotate(geom="text", x=as.Date("2020-10-01"), y=1,label="Pandemic period",color="red") +
     scale_x_date(date_labels="%b %y",date_breaks  ="1 month")+
    xlab("Date of Admission")

#check for autocorrelation
install.packages("lmtest")
acf(resid(ts))

#build time series
ts=lm(SMR ~ series + pandperiod + pandseries, df5)
confint(m_its)
library(stargazer)
tab=stargazer(ts, 
+           type="text",
+           dep.var.labels = ("SMR"),
+           column.labels = ("Results"),
+           covariate.labels = c("Time", "Pandemic Period Start", "Time since Pandemic Started"),
+           omit.stat="all",
+           digits=2)

#segmented analysis
smr_month=smr_month %>%
     group_by(segment) %>%
     mutate(segseries = seq_along(segment)) %>%
     mutate(segseries = if_else(segment == "0", "0", as.character(segseries))) %>%
     mutate(segseries = as.numeric(segseries))

m <- lm(SMR ~ series, data = smr_month) 
segmented.fit = segmented(m, seg.Z =~series, psi=50)
summary(segmented.fit)
smr_month$segment = smr_month %>% ifelse(series > 47, 1, 0)
ts=lm(SMR ~ segment + segseries + series, smr_month)

#Repeat for NSW+VIC+ACT
sub_state=df3 %>%
	filter(state_subgroup =="1") %>%
    mutate(year = year(ICU_AD_DTM), month = month(ICU_AD_DTM)) %>%
    group_by(month, year) %>%
    summarise(SMR = mean(DIED_HOSP)/mean(ANZROD)) %>%
    arrange(year, month) 
    
sub_state$yymm=paste(sub_state$year, sub_state$month, sep="-")
sub_state$date=as.Date(zoo::as.yearmon(df4$yymm))
sub_state=sub_state %>%
    mutate(pandperiod = dplyr::if_else(date>=as.Date("2020-03-01"), 1, 0)) %>%
    mutate (pandseries = ifelse(pandperiod == 0, 0, 1:n()))
    
    
 sub_state=sub_state %>%
    mutate(pandperiod = dplyr::if_else(date>=as.Date("2020-03-01"), 1, 0)) %>%
    group_by(pandperiod) %>%
    mutate(pandseries = seq_along(pandperiod))

sub_state$pandseries=ifelse(sub_state$pandperiod == "0", "0", sub_state$pandseries)
sub_state$series= 1:nrow(sub_state)

ggplot(smr_month, aes(x=as.Date(YYMM),y=SMR, group=1)) + 
     geom_line() + 
     ylim(0.8, 1) + 
     theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + 
     geom_vline(xintercept = as.Date("2020-03-01"), linetype="dotted",color = "blue", size=1)+
     geom_smooth(method = "lm", aes(group=pandperiod)) +
     geom_smooth(method = "lm", aes(group=segment), linetype="dashed", color ="red") +
     annotate(geom="text", x=as.Date("2020-10-01"), y=1,label="Pandemic period",color="red")
--------------------------
#patient level multivariate regression analysis
#Link in time series variables for patient level analysis

df4 %>% 
	mutate(date=as.Date(zoo::as.yearmon(paste(year, month, sep="-"))) #date linkage key

linked= merge(x=df4, y=select(df5, c("date", "pandperiod", "series", "pandseries")), by ="date", all.x=TRUE)

linked = linked %>%
     mutate(series = series.y) %>%
     select(-series.x, -series.y)

library(lme4)
m = glmer(DIED_HOSP ~ ANZROD + pandperiod + series + pandseries + state_subgroup + HospitalClassification + (1|SiteID), data=linked, family=binomial, control = glmerControl(optimizer = "bobyqa"),
    nAGQ = 10)
summary(m)
write.csv(summary(m)$coefficients, file="coeff.csv")]

library(broom.mixed)
tidy(m,conf.int=TRUE,exponentiate=TRUE,effects="fixed")

----------------------------------
#EWMA

dataset_ewma=df4 %>% 
     group_by(year, week=week(ICU_AD_DTM)) %>% 
     summarise (ANZROD=mean(ANZROD), DIED_HOSP=mean(DIED_HOSP)) %>%
     mutate(ewma_rod = NA, ewma_actual = NA, sd_ewma_rod = NA, ucl = NA, lcl = NA)

dataset_ewma=df4 %>% 
     arrange(ICU_AD_DTM) %>% 
     mutate(ewma_rod = NA, ewma_actual = NA, sd_ewma_rod = NA, ucl = NA, lcl = NA)

dataset_ewma$series = seq(1, nrow(dataset_ewma), 1)


weight = 0.00005 #the lower the number the greater weight given to the previous values (ie smoothes the graph) - ANZICS uses 0.005, Alternative is to scale this based on the number of events displayed 
target = 0.07 #starting value on y axis (?start at mortality for previous time period sampled)
SD = 3 # sets the control limits
startingVar = 0 #typically set to zero (but not necessarily -  if set to expected var of popn gives funnel type pic)

#assign EWMA to each patient ROD/observed mortality. Generate UCL and LCL

for(i in 1:nrow(dataset_ewma)) 
{
    dataset_ewma$ewma_rod[i] = ifelse(dataset_ewma$series[i]==1, target * (1 - weight) + (weight * dataset_ewma$ANZROD[i]), dataset_ewma$ewma_rod[i-1] * (1 - weight) + (weight * dataset_ewma$ANZROD[i]))
    dataset_ewma$ewma_actual[i] = ifelse(dataset_ewma$series[i]==1, target * (1 - weight) + (weight * dataset_ewma$DIED_HOSP[i]), dataset_ewma$ewma_actual[i-1] * (1 - weight) + (weight * dataset_ewma$DIED_HOSP[i]))
    dataset_ewma$sd_ewma_rod[i] = ifelse(dataset_ewma$series[i]==1, weight * weight * dataset_ewma$ANZROD[i] * (1 - dataset_ewma$ANZROD[i]) + (1 - weight) * (1 - weight) * startingVar, weight * weight * dataset_ewma$ANZROD[i] * (1 - dataset_ewma$ANZROD[i]) + (1 - weight) * (1 - weight) * dataset_ewma$sd_ewma_rod[i-1])
    dataset_ewma$ucl[i] = dataset_ewma$ewma_rod[i] + SD * sqrt(dataset_ewma$sd_ewma_rod[i])
		dataset_ewma$lcl[i] = dataset_ewma$ewma_rod[i] - SD * sqrt(dataset_ewma$sd_ewma_rod[i])
    
    }
 
 
dataset_ewma %>%
     ggplot(aes(x = series, y = ewma_rod, colour = "Predicted Risk of Death")) +
     geom_line(size=0.8)+
     geom_line(aes(y = ucl, colour = "3SD from Predicted Risk of Death"), size = 0.8) +
     geom_line(aes(y = lcl, colour = "3SD from Predicted Risk of Death"), size = 0.8) +
     geom_line(aes(y = ewma_actual, colour = "Observed Mortality"), size = 0.8) +
     scale_colour_manual(name = "", values = c("lightblue","red","blue"), labels = c("3SD from Predicted Risk of Death","Observed Mortality","Predicted Risk of Death")) +
     scale_y_continuous(limits = c(0.05,0.09), breaks = seq(0.05, 0.09, 0.01), labels = seq(0.05, 0.09, 0.01)*100) +
     scale_x_continuous(expand = c(0,0), labels=scales::comma) + 
    ylab("Exponentially Weighted Moving Average(Risk %)") +
     xlab("Admission Number")
   
   
<ignore below>
#get 95% CI
confint(glm.binary)

#ROC modelling

#generate predicted outcomes for dataset
ROCpred = predict(glm.binary, 
                  type='response')
                  
#assign observed outcomes to cases 
pred = prediction(ROCpred, df1$died_hosp)

#calculate model performance
perf_auc = performance(pred, measure = "tpr", x.measure = "fpr")
perf_acc= performance(pred, measure = "acc")
max(perf_acc@y.values[[1]])

#AUC Plots and reports
plot(perf, col=rainbow(10))

perf_auc = performance(pred, measure = "auc")
perf_auc@y.values[[1]]

