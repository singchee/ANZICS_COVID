library(tidyverse)
library(lubridate)
library(zoo)

df1=.xls

#choose columns of interest
df2=select(df1, c(PatientID, HospitalClassification, 
                  JurisdictionName,postcode,SiteID, AGE, ELECT, SEX,AP3DIAG, AP3_SUBCODE, ELECT_SURG, READMITTED,
                  PLAN_ICU, ECMO_IND, INV_IND, RENAL_IND, INOTROP_IND, ICU_AD_DTM, ICU_HRS, 
                  HOSP_OUTCM, HOSP_HRS, DIED_ICU, DIED_HOSP, ANZRODIsSMR, ANZRODRiskOfDeath, 
                  ANZRODRiskofDeath_old, Apache2Score, Apache3Score, PANDEMIC, VENTILATED, FRAILTY))




# replacing NAs with 0
df2 = replace_na(df2, list(DIED_ICU=0, DIED_HOSP=0, PLAN_ICU=0, ELECT=0, ELECT_SURG=0, ECMO_IND=0, INV_IND=0, RENAL_IND=0, INOTROP_IND=0, VENTILATED=0))

#Select only those with SMR
df3= filter(df2, df2$ANZRODIsSMR == 1)

#Select ANZROD based on 1Jan 2020 (old vs new)
df3$ANZROD = ifelse(df3$ICU_AD_DTM >= as.Date("2020-01-01", origin = "1970-01-01"), df3$ANZRODRiskOfDeath, df3$ANZRODRiskofDeath_old)

#Generate pandemic variable - admitted >= March 2020
df3$pandemicperiod = ifelse(df3$ICU_AD_DTM >= as.Date("2020-03-01", origin = "1970-01-01"), 1, 0)

#Generate NSW+Vic+ACT flag
df3$state_subgroup = ifelse(df3$JurisdictionName %in% c('VIC', 'NSW', 'ACT'), 1, 0)
#Remove NZ 
df3 = filter(df3, df3$JurisdictionName !="NZ")

#Apply exclusions

#Remove pandmic codes
df4= filter(df3, df3$PANDEMIC  !=1)
df4= filter(df3, !df3$AP3_SUBCODE  %in% 
      c(101.03, 102.03, 104.02, 106.05, 107.06, 110.02, 
      203.02, 204.02, 206.02, 208.02 , 209.02, 210.03, 212.03, 213.02, 
      301.05, 
      404.04, 
      501.07, 503.02, 
      704.12, 
      901.08, 
      1101.10 , 1102.02))
     
#remove readmissions
df4 = filter(df4, df4$READMITTED == 0)

#generate table 1
catVars=c("SEX","PLAN_ICU", "DIED_ICU","DIED_HOSP", "VENTILATED", "INOTROP_IND","RENAL_IND")
tab = CreateTableOne(data = df4, vars =c("SEX", "AGE", "PLAN_ICU", "DIED_ICU","DIED_HOSP"), strata= "pandemicperiod")
---------------------------------------
#SMR based interrupted time series with monthly granularity
#group data by month and calculate SMR
df5=df4 %>%
    mutate(year = year(AD_date), month = month(AD_date)) %>%
    group_by(month, year) %>%
    summarise(SMR = mean(DIED_HOSP)/mean(ANZROD)) %>%
    arrange(year, month)
    
#Generate valid time stamp for each month
library(zoo)
df5$date=as.Date(zoo::as.yearmon(df5$date))

#generate pandemic period and time series labels
df5=df5 %>%
    mutate(pandperiod = dplyr::if_else(date>=as.Date("2020-03-01"), 1, 0)) %>%
    mutate (pandseries = ifelse(pandperiod == 0, 0, 1:n())) %>%

df5$series= 1:nrow(df5)


#SMR plot
ggplot(df5, aes(x=date,y=SMR, group=1)) + 
    geom_line() + 
    ylim(0.5, 1) + 
    theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + 
    geom_vline(xintercept = as.Date("2020-03-01"), linetype="dotted",color = "blue", size=1)+
    geom_smooth(method = "lm", aes(group=pandperiod)) +
    annotate(geom="text", x=as.Date("2020-10-01"), y=1,label="Pandemic period",color="red")

#check for autocorrelation
install.packages("lmtest")
acf(resid(ts))

#build time series
ts=lm(SMR ~ series + pandperiod + pandseries, df5)

library(stargazer)
tab=stargazer(ts, 
+           type="text",
+           dep.var.labels = ("SMR"),
+           column.labels = ("Results"),
+           covariate.labels = c("Time", "Pandemic Period Start", "Time since Pandemic Started"),
+           omit.stat="all",
+           digits=2)


--------------------------
#patient level multivariate regression analysis
#Link in time series variables for patient level analysis

df4$date=as.Date(as.yearmon(paste(df4$year, df4$month, sep="-"))) #date linkage key

linked= merge(x=df4, y=select(df5, c("date", "pandperiod", "series", "pandseries")), by ="date", all.x=TRUE)

m = glm(DIED_HOSP ~ ANZROD + pandperiod + series + pandseries + state_subgroup + SiteID, data=linked, family=binomial)
summary(m)

----------------------------------
#EWMA

ewma_dataset <- df4 %>%
     mutate(ewma_rod = NA, ewma_actual = NA, sd_ewma_rod = NA, ucl = NA, lcl = NA) %>%
     arrange(ICU_AD_DTM) %>%
     mutate(series = seq(1, nrow(.), 1))

weight = 0.005 #the lower the number the greater weight given to the previous values (ie smoothes the graph) - ANZICS uses 0.005, Alternative is to scale this based on the number of events displayed 
target = 0.50 #starting value on y axis (?start at mortality for previous time period sampled)
SD = 3 # sets the control limits
startingVar = 0 #typically set to zero (but not necessarily -  if set to expected var of popn gives funnel type pic)

#assign weights to each patient ROD/observed mortality. Generate UCL and LCL
for(i in 1:nrow(dataset_ewma)) 
{
    dataset_ewma$ewma_rod[i] = ifelse(dataset_ewma$series[i]==1, target * (1 - weight) + (weight * dataset_ewma$ANZROD[i]), dataset_ewma$ewma_rod[i-1] * (1 - weight) + (weight * dataset_ewma$ANZROD[i]))
    dataset_ewma$ewma_actual[i] = ifelse(dataset_ewma$series[i]==1, target * (1 - weight) + (weight * dataset_ewma$DIED_HOSP[i]), dataset_ewma$ewma_actual[i-1] * (1 - weight) + (weight * dataset_ewma$DIED_HOSP[i]))
    dataset_ewma$sd_ewma_rod[i] = ifelse(dataset_ewma$series[i]==1, weight * weight * dataset_ewma$ANZROD[i] * (1 - dataset_ewma$ANZROD[i]) + (1 - weight) * (1 - weight) * startingVar, weight * weight * dataset_ewma$ANZROD[i] * (1 - dataset_ewma$ANZROD[i]) + (1 - weight) * (1 - weight) * dataset_ewma$sd_ewma_rod[i-1])
    dataset_ewma$ucl[i] = dataset_ewma$ewma_rod[i] + SD * sqrt(dataset_ewma$sd_ewma_rod[i])
		dataset_ewma$lcl[i] = dataset_ewma$ewma_rod[i] - SD * sqrt(dataset_ewma$sd_ewma_rod[i])
    
    }
 
 
 dataset_ewma %>%
   ggplot(aes(x = series, y = ewma_actual, colour = "Observed Mortality")) +
   geom_line(size = 1.5) +
   geom_line(aes(y = ewma_rod, colour = "Predicted Risk of Death"), size = 1) +
   geom_line(aes(y = ucl, colour = "3SD from Predicted Risk of Death"), size = 1) +
   geom_line(aes(y = lcl, colour = "3SD from Predicted Risk of Death"), size = 1) +
   scale_colour_manual(name = "", values = c("lightblue","red","blue"), labels = c("3SD from Predicted Risk of Death","Observed Mortality","Predicted Risk of Death")) +
	 scale_y_continuous(limits = c(0,0.2), breaks = seq(0, 0.7, 0.1), labels = seq(0, 0.7, 0.1)*100, expand = c(0,0)) +
	 scale_x_continuous(expand = c(0,0)) +
   ylab("Exponentially Weighted Moving Average") +
	 xlab("Admission Number")
   
   
   
<ignore below>
#get 95% CI
confint(glm.binary)

#ROC modelling

#generate predicted outcomes for dataset
ROCpred = predict(glm.binary, 
                  type='response')
                  
#assign observed outcomes to cases 
pred = prediction(ROCpred, df1$died_hosp)

#calculate model performance
perf_auc = performance(pred, measure = "tpr", x.measure = "fpr")
perf_acc= performance(pred, measure = "acc")
max(perf_acc@y.values[[1]])

#AUC Plots and reports
plot(perf, col=rainbow(10))

perf_auc = performance(pred, measure = "auc")
perf_auc@y.values[[1]]

