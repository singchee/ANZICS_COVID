library(caret)
library(MLeval)

#remove Na values and change to 0
 df2=filter(df1, !is.na(df1$anzrodriskofdeath))
 
#change outcome to name
train$diedicu=make.names(train$diedicu)


#create index for train/test
 trainindex=createDataPartition(df1$ralos, p=.8, list=FALSE, times = 1)
train = df1[trainindex,]
test = df1[-trainindex,]

#Continuous predictor - ridge

#resampling technique
fitControl = trainControl(method = "repeatedcv",   
                           number = 10,    
                           repeats = 10)
                           
rf <- train(ralos ~ anzrodriskofdeath,
               data = train,
               method = "rf",
               trControl = fitControl,
               preProcess = c('scale', 'center'), 
               na.action = na.omit)

#create resampling techniqe for RF
fitControl = trainControl(method = "cv",
                           number = 10, 
                           savePredictions = TRUE, 
                           classProbs = TRUE, 
                           verboseIter = TRUE)
                               
#specify gbm parameters
gbmGrid =  expand.grid(interaction.depth= 3, 
                        n.trees = 100, 
                        shrinkage = 0.1,
                        n.minobsinnode = 10)

model_gbm = train(died_hosp ~ anzrodriskofdeath, data=train, 
                  method="gbm", 
                  trControl = fitControl, 
                  tuneGrid = gbmGrid, 
                  verbose = FALSE
                  )

model_gbm
evalm(fit)$roc
evalm(fit)$stdres

#RF code
model_rf=  train (diedicu ~ anzrodriskofdeath, 
                  data=train,
                  method = "rf", 
                  trControl = fitControl, 
                  preProcess = c("center","scale"), 
                  ntree = 50)

model_rf
