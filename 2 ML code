library(caret)
library(MLeval)

#remove Na values and change to 0
 df2=filter(df1, !is.na(df1$anzrodriskofdeath))
 
#change outcome to name
train$diedicu=make.names(train$diedicu)


#create index for train/test
 trainindex=createDataPartition(df1$ralos, p=.8, list=FALSE, times = 1)
train = df1[trainindex,]
test = df1[-trainindex,]

#Continuous predictor 

#resampling technique
fitControl = trainControl(method = "cv",
                           number = 10, 
                           savePredictions = "final", 
                           classProbs = FALSE, 
                           verboseIter = TRUE)

gbmGrid =  expand.grid(interaction.depth= 3, 
                        n.trees = 100, 
                        shrinkage = 0.1,
                        n.minobsinnode = 10)

model_gbm = train(los ~ anzrodriskofdeath, data=train, 
                  method="gbm", 
                  trControl = fitControl, 
                  tuneGrid = gbmGrid, 
                  verbose = FALSE, 
                  preProcess = c('scale', 'center')
                  )

model_gbm

#classification

train$diedicu=make.names(train$diedicu)


fitControl = trainControl(method = "cv",
                           number = 10, 
                           savePredictions = "final", 
                           classProbs = TRUE, 
                           verboseIter = TRUE)

model_gbm = train(died_hosp ~ anzrodriskofdeath, data=train, 
                  method="gbm", 
                  trControl = fitControl, 
                  tuneGrid = gbmGrid, 
                  verbose = FALSE
                  )

rf <- train(ralos ~ anzrodriskofdeath,
               data = train,
               method = "rf",
               trControl = fitControl,
               preProcess = c('scale', 'center'), 
               na.action = na.omit)


gbm.prob = predict(model_gbm2, test, type="prob") #training set probability
gbm.ROC <- roc(predictor=gbm.prob$X1, 
               response=test$outcome)   #compare predicted with actual

gbm.ROC$auc
model_gbm

#RF code
model_rf=  train (diedicu ~ anzrodriskofdeath, 
                  data=train,
                  method = "rf", 
                  trControl = fitControl, 
                  preProcess = c("center","scale"), 
                  ntree = 50)

model_rf
