#get estimates from ME regression without pandemic perioid adjustment

mod_ts = glmer(DIED_HOSP ~ ANZRODRiskofDeath_old + HospitalClassification + series_month + (1|SiteID), data=df3, family=binomial, control = glmerControl(optimizer = "bobyqa"), nAGQ = 0)


#get monthly estimates from Mixed Effects regression

its = mod_ts %>%
     tidy(effects = "fixed", conf.int = TRUE)%>% #extract fixed effect estimats
     filter(str_detect(term, "series_month")) %>% #filter out predictors that have "series" 
     mutate(across(c(estimate, starts_with("conf")), exp)) %>% #exponentiate estaimates and CI to get OR
     mutate(series = seq_along(1:nrow(.)), pandperiod = ifelse(series>=38, 1, 0)) %>% #generate  month series and pandemic period (month 39 is series 38 due to reference category)
     group_by(pandperiod) %>%
     mutate(series_pand = 1:n()) %>% #generate post-pandemic monthly sequence
     mutate(series_pand = ifelse(pandperiod == 0, 0, series_pand))


#generate time series table based on monthly OR
ts = ts(its[,3], frequency=12, start=c(2017,2)) #start from feb as Jan was  used for reference in mixed effects regression model
ts

#plot data
options(scipen=5)
plot(ts, ylim=c(0,1.2), type='l', col="blue", xlab="Month", ylab="OR Death")


its %>%
    ggplot(aes(series, estimate))+ #plot
    geom_point() +
    geom_smooth() +
    geom_linerange(aes(ymin = conf.low, ymax = conf.high)) +
    scale_x_continuous(breaks = scales::breaks_width(2))+
    geom_vline(xintercept = 39, linetype="dotted",color = "blue", size=1) +
    ylim(0.6, 1.4) + 
    ylab("Adjusted Odds of Death") +
    xlab("Month of Admission") +
    ggtitle("Adjusted OR of Death Over Time (All Patients)")+
    annotate(geom="text", x=45, y=1.2,label="Pandemic Period",color="Black")

#create data with no seasonality
ts_decom = decompose(ts)
plot(ts_decom)
ts_noseason = ts - ts_decom$seasonal #remove seasonal component
plot(ts_noseason)
lines(lowess(ts_noseason))
ts_noseason_df=data.frame(Mortality=unclass(ts_noseason), date=as.Date(ts_noseason))

#add time series labels to seasonally adjusted data
ts_noseason_df=ungroup(ts_noseason_df)
 ts_noseason_df = ts_noseason_df %>%
     mutate(series_month = 1:n(), pandemic = ifelse(series_month>=46, 1, 0)) %>% #generate  month series and pandemic period (month 39 is series 38 due to reference category)
     group_by(pandemic) %>%
     mutate(series_pand = 1:n()) %>% #generate post-pandemic monthly sequence
     mutate(series_pand = ifelse(pandemic == 0, 0, series_pand))
 
ts_mod_noseason=glm(ts~ pandemic + series_month+series_pand, data=ts_noseason_df, family=gaussian())
 summary(ts_mod_noseason)

#plotting adjusted 



#ITS using Linear regression 


#add in series labels
ts_noseason_df = ts_noseason_df %>% 
     mutate(
      pandemic = ifelse(date > as.Date("2020/3/1"),1, 0) %>%
      series_month = seq_along(1:nrow(.))) %>% # generate month sequence
      group_by(pandemic) %>%
     mutate(series_pand = 1:n()) %>% #generate post-pandemic monthly sequence
     mutate(series_pand = ifelse(pandemic == 0, 0, series_pand))

#build GLM model
ts_model=glm(estimate ~ series + series_pand + pandperiod, ts_noseason_df, family=gaussian())

#ITS using its.analysis

itsa.model(data=as.data.frame(its), time="series", depvar="estimate", interrupt_var="pandperiod", alpha=0.05)



#TS using adjusted from Mixef effect regression
ts= est %>% 
    mutate(
    pandemic=ifelse(series < 39, 0, 1)) %>%
    group_by(series) %>%
    mutate(
        series_month = cur_group_id()) %>% # generate month sequence %>%
    group_by(pandemic) %>%
    mutate(series_pand = match(series, unique(series))) %>%
    mutate(series = seq_along(1:nrow(.)), pandperiod = ifelse(series>=38, 1, 0)) #generate  month series and pandemic period (month 39 is series 38 due to reference category)

#check for autocorrelation
library(car)
install.packages("lmtest")

durbinWatsonTest(ts)

act(resid(ts))

#build GLM model
ts_model=glm(estimate ~ series + series_pand + pandperiod, its, family=gaussian())



tab=stargazer(ts, 
+           type="text",
+           dep.var.labels = ("SMR"),
+           column.labels = ("Results"),
+           covariate.labels = c("Time", "Pandemic Period Start", "Time since Pandemic Started"),
+           omit.stat="all",
+           digits=2)


#IGNORE BELOW#

